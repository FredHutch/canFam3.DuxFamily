CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E6A0C4", hight="#7294D4")
library(ggVennDiagram)
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E6A0C4", high="#7294D4")
wes_palette(n=4, name="Zissou1", type="discrete")
wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
hight=3, heigh=3)
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
hight=3, height=3)
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
width=3, height=3)
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
width=4, height=4)
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
width=4, height=4)
library(ggVennDiagram)
#wes_palette(n=4, name="Zissou1", type="discrete")[c(1,4)]
venn_data <- list(CALTinC = calt_down$ENSEMBL,
CinC = duxc_down$ENSEMBL, HinC = dux4_down$ENSEMBL)
ggVennDiagram(venn_data) +
scale_fill_gradient(low="#E1AF00", high="#3B9AB2")
ggsave(filename=file.path(fig_dir, "CALTinC_CinC_HinC_diagram.pdf"),
width=4, height=4)
BiocManager::install(c("goseq"))
# what's the GO functions of the down-regulated genes?
# HinC
library(goseq)
CinC_go <- .do_goseq(universe=rownames(CinC.end.dds),
selected=duxc_down$ENSEMBL, threshold_pval=0.01)
# what's the GO functions of the down-regulated genes?
# HinC
suppressPackageStartupMessages(library(goseq))
suppressPackageStartupMessages(library(TxDb.Cfamiliaris.UCSC.canFam3.ensGene))
CinC_go <- .do_goseq(universe=rownames(CinC.end.dds),
selected=duxc_down$ENSEMBL, threshold_pval=0.01)
BiocManager::install("org.Cf.eg.db")
# what's the GO functions of the down-regulated genes?
# HinC
suppressPackageStartupMessagens(library(goseq))
# what's the GO functions of the down-regulated genes?
# HinC
suppressPackageStartupMessages(library(goseq))
suppressPackageStartupMessages(library(TxDb.Cfamiliaris.UCSC.canFam3.ensGene))
suppressPackageStartupMessages(library(org.Cf.eg.db))
CinC_go <- .do_goseq(universe=rownames(CinC.end.dds),
selected=duxc_down$ENSEMBL, threshold_pval=0.01)
# what's the GO functions of the down-regulated genes?
# HinC
suppressPackageStartupMessages(library(goseq))
suppressPackageStartupMessages(library(TxDb.Cfamiliaris.UCSC.canFam3.ensGene))
suppressPackageStartupMessages(library(org.Cf.eg.db))
CinC_go <- .do_goseq(universe=rownames(CinC.ens.dds),
selected=duxc_down$ENSEMBL, threshold_pval=0.01)
traceback()
universe=rownames(CinC.ens.dds)
head(universe)
.do_goseq
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
selected=duxc_down$ENSEMBL
head(selected)
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
head(bias.data)
lengthData
lengthData <- median(width(txsByGene))
# what's the GO functions of the down-regulated genes?
# HinC
suppressPackageStartupMessages(library(goseq))
suppressPackageStartupMessages(library(TxDb.Cfamiliaris.UCSC.canFam3.ensGene))
suppressPackageStartupMessages(library(org.Cf.eg.db))
# CinC
universe <- sapply(strsplit(names(rownames(CinC.ens.dds), ".", fixed=TRUE), "[[", 1))
universe <- sapply(strsplit(rownames(CinC.ens.dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(duxc_down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
CinC_go <- .do_goseq(universe=universe,
selected=selected, threshold_pval=0.01)
dim(CinC_go)
head(CinC_go)
.get_go_by_down <- function(dds, down) {
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
go <- .do_goseq(universe=universe,
selected=selected, threshold_pval=0.01)
}
CinC_go <- .get_go_by_down(CinC.ens.dds, duxc_down)
HinC_go <- .get_go_by_down(HinC.ens.dds, dux4_down)
CALTinC_go <- .get_go_by_down(CALTinC.ens.dds, calt_down)
head(CALTinC_go)
dim(CALTinC_go)
CALTinC_go %>% filter(fdr < 0.05)
CinC.ens.dds
rwoData(CinC.ens.dds)
rowData(CinC.ens.dds)
BiocManager::install("GenomicFeature")
HinC_go %>% filter(fdr < 0.01)
CinC_go %>% filter(fdr < 0.01)
CinC_go %>% filter(fdr < 0.05)
library(GenomicFeatures)
dds=CALTinC.ens.dds
down=calt_down
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
# rtracklayer::ucscGenomes()[40:42] does support canFam3
# but supportedGeneIDs() does onot support canFam3??
GO.BP <- goseq(pwf, "canFam3", "ensGene", test.cats=c("GO:BP"))
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < 0.05)
dim(enriched.BP)
enriched.BP[1:10]
enriched.BP[1:10,]
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .mapID2GeneName(dds,
id=cat_genes, clean=TRUE)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
return.DEInCat <- TRUE
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .mapID2GeneName(dds,
id=cat_genes, clean=TRUE)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
?getgo
.cat2DEgenes <- function(GOID, pwf) {
gene2cat <- getgo(rownames(pwf), "canFam3", "ensGene", fetch.cats = "GO:BP")
names(gene2cat) <- rownames(pwf)
cat2gene <- goseq:::reversemapping(gene2cat)
#' sanity check
doesIDexist <- GOID %in% names(cat2gene)
if (!all(doesIDexist)) stop("GOID is not found")
sig_gene <- rownames(pwf)[pwf$DEgenes==1]
geneInGOID <- cat2gene[[GOID]]
sig_gene[sig_gene %in% geneInGOID]
}
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .mapID2GeneName(dds,
id=cat_genes, clean=TRUE)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
head(enriched.BP)
enriched.BP$DEInCat
gene2cat <- getgo(rownames(pwf), "canFam3", "ensGene", fetch.cats = "GO:BP")
class(gene2cat)
gene2cat[[1]]
names(gene2cat)
names(gene2cat)
gene2cat[[1]]
names(gene2cat) <- rownames(pwf)
length(gene2cat)
cat2gene <- goseq:::reversemapping(gene2cat)
class(cat2gene)
cat2gene[[1]]
length(cat2gene)
head(names(cat2gene))
doesIDexist <- GOID %in% names(cat2gene)
GOID=enriched.BP$category[10]
doesIDexist <- GOID %in% names(cat2gene)
sig_gene <- rownames(pwf)[pwf$DEgenes==1]
sig_gene
head(sig_gene)
sig_gene[sig_gene %in% geneInGOID]
geneInGOID <- cat2gene[[GOID]]
sig_gene[sig_gene %in% geneInGOID]
geneInGOID <- cat2gene[[GOID]]
cat_gene=sig_gene[sig_gene %in% geneInGOID]
cat_gene
AnnotationDbi::select(cat_gene, key="ENSEMBL", columns="SYMBOL")
?select
AnnotationDbi::select(org.Cf.eg.db, keys=cat_gene, keytype="ENSEMBL", columns="SYMBOL")
a=AnnotationDbi::select(org.Cf.eg.db, keys=cat_gene, keytype="ENSEMBL", columns="SYMBOL")
class(a)
.mapID2GeneName <- function(ensembl_id) {
require(org.Cf.eg.db)
require(AnnotationDbi)
symbol_df <- AnnotationDbi::select(org.Cf.eg.db, keys=cat_gene, keytype="ENSEMBL", columns="SYMBOL") %>%
pull(SYMBOL)
}
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < 0.05)
return.DEInCat <- TRUE
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .mapID2GeneName(dds, id=cat_genes, clean=TRUE)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < 0.05)
return.DEInCat <- TRUE
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .mapID2GeneName(dds, id=cat_genes, clean=TRUE)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
.mapID2GeneName <- function(ensembl_id) {
require(org.Cf.eg.db)
require(AnnotationDbi)
symbol_df <- AnnotationDbi::select(org.Cf.eg.db, keys=cat_gene, keytype="ENSEMBL", columns="SYMBOL") %>%
pull(SYMBOL)
}
.mapID2GeneName <- function(ensembl_id) {
require(org.Cf.eg.db)
require(AnnotationDbi)
AnnotationDbi::select(org.Cf.eg.db, keys=cat_gene, keytype="ENSEMBL", columns="SYMBOL") %>%
pull(SYMBOL)
}
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < 0.05)
return.DEInCat <- TRUE
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- .AnnotationDbi::select(org.Cf.eg.db,
keys=cat_gene, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < 0.05)
return.DEInCat <- TRUE
if (return.DEInCat & !is.null(dds)) {
cat_genes <- lapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_gene, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
write.csv(enriched.BP, file=file.path(pkg_dir, "stats", "CALTinC_GO_repressed.csv"))
class(enriched.BP)
head(enriched.BP)
write.csv(enriched.BP, file=file.path(pkg_dir, "stats", "CALTinC_GO_repressed.csv"))
?write.csv
head(cat_gene)
head(cat_genes)
cat_genes = unlist(cat_genes)
head(cat_genes)
cat_genes
enriched.BP$category
cat_genes <- sapply(enriched.BP$category[1:10], function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_gene, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
cat_genes <- sapply(enriched.BP$category[1:10], function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_genes, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
cat_genes
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
length(cat_genes)
dim(enriched.BP)
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr <0.01)
enriched.BP
.do_goseq <- function(universe, selected, threshold.fdr=0.01,
return.DEInCat=FALSE, dds=NULL) {
# This function perfroms GO term analysis for canFam3 genome build genes
require(goseq)
require(org.Cf.eg.db)
require(GO.db)
require(TxDb.Cfamiliaris.UCSC.canFam3.ensGene)
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
# rtracklayer::ucscGenomes()[40:42] does support canFam3
# but supportedGeneIDs() does onot support canFam3??
GO.BP <- goseq(pwf, "canFam3", "ensGene", test.cats=c("GO:BP"))
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < threshold.fdr)
if (return.DEInCat & !is.null(dds)) {
cat_genes <- sapply(enriched.BP$category[1:10], function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_genes, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
return(enriched.BP)
}
.get_go_by_down <- function(dds, down) {
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
go <- .do_goseq(universe=universe, return.DEInCat=TRUE,
selected=selected, threshold.fdr=0.01)
}
CinC_go <- .get_go_by_down(CinC.ens.dds, duxc_down)
CinC_go
.do_goseq <- function(universe, selected, threshold.fdr=0.01,
return.DEInCat=FALSE, dds=NULL) {
# This function perfroms GO term analysis for canFam3 genome build genes
require(goseq)
require(org.Cf.eg.db)
require(GO.db)
require(TxDb.Cfamiliaris.UCSC.canFam3.ensGene)
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
# rtracklayer::ucscGenomes()[40:42] does support canFam3
# but supportedGeneIDs() does onot support canFam3??
GO.BP <- goseq(pwf, "canFam3", "ensGene", test.cats=c("GO:BP"))
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < threshold.fdr)
if (return.DEInCat) {
cat_genes <- sapply(enriched.BP$category[1:10], function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_genes, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
return(enriched.BP)
}
.get_go_by_down <- function(dds, down) {
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
go <- .do_goseq(universe=universe, return.DEInCat=TRUE,
selected=selected, threshold.fdr=0.01)
}
# get g
.get_repressed_go <- function(dds, down) {
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
go <- .do_goseq(universe=universe, return.DEInCat=TRUE,
selected=selected, threshold.fdr=0.01)
}
# get go term: suppress innate immue response? defense response to virus,
# negative regulation of viral genome replication
CinC_go <- .get_repressed_go(CinC.ens.dds, duxc_down)
dds=CinC.ens.dds
down=duxc_down
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
threshold.fdr=0.01
universe=universe
selected=selected
return.DEiNCat=TRUE
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
# rtracklayer::ucscGenomes()[40:42] does support canFam3
# but supportedGeneIDs() does onot support canFam3??
GO.BP <- goseq(pwf, "canFam3", "ensGene", test.cats=c("GO:BP"))
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < threshold.fdr)
dim(enriched.BP)
cat_genes <- sapply(enriched.BP$category[1:10], function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_genes, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
cat_genes
length(cat_genes)
.do_goseq <- function(universe, selected, threshold.fdr=0.01,
return.DEInCat=FALSE, dds=NULL) {
# This function perfroms GO term analysis for canFam3 genome build genes
require(goseq)
require(org.Cf.eg.db)
require(GO.db)
require(TxDb.Cfamiliaris.UCSC.canFam3.ensGene)
txsByGene <- transcriptsBy(TxDb.Cfamiliaris.UCSC.canFam3.ensGene, by="gene")
names(txsByGene) <-
sapply(strsplit(names(txsByGene), ".", fixed=TRUE), "[[", 1)
lengthData <- median(width(txsByGene))
isDEGs <- as.integer(universe %in% selected)
names(isDEGs) <- universe
bias.data <- lengthData[names(isDEGs)]
pwf <- nullp(isDEGs, bias.data=bias.data, plot.fit=FALSE)
# rtracklayer::ucscGenomes()[40:42] does support canFam3
# but supportedGeneIDs() does onot support canFam3??
GO.BP <- goseq(pwf, "canFam3", "ensGene", test.cats=c("GO:BP"))
enriched.BP <- GO.BP %>%
mutate(fdr = p.adjust(over_represented_pvalue, method="BH")) %>%
dplyr::filter(fdr < threshold.fdr)
if (return.DEInCat) {
cat_genes <- sapply(enriched.BP$category, function(GOID) {
cat_genes <- .cat2DEgenes(GOID, pwf=pwf)
cat_genename <- AnnotationDbi::select(org.Cf.eg.db,
keys=cat_genes, keytype="ENSEMBL",
columns="SYMBOL") %>% pull(SYMBOL)
paste(cat_genename, collapse=",")
})
enriched.BP <- add_column(enriched.BP, DEInCat=cat_genes)
}
return(enriched.BP)
}
.get_repressed_go <- function(dds, down) {
universe <- sapply(strsplit(rownames(dds), ".", fixed=TRUE), "[[", 1)
selected <- sapply(strsplit(down$ENSEMBL, ".", fixed=TRUE), "[[", 1)
go <- .do_goseq(universe=universe, return.DEInCat=TRUE,
selected=selected, threshold.fdr=0.01)
}
# get go term: suppress innate immue response? defense response to virus,
# negative regulation of viral genome replication
CinC_go <- .get_repressed_go(CinC.ens.dds, duxc_down)
HinC_go <- .get_repressed_go(HinC.ens.dds, dux4_down)
CALTinC_go <- .get_repressed_go(CALTinC.ens.dds, calt_down)
HinC_go$DEInCat
